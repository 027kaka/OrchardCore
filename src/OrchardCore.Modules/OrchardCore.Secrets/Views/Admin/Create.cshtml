@model SecretBindingViewModel

<h1>@RenderTitleSegments(T["Create Secret Binding"])</h1>

<div asp-validation-summary="All"></div>
<form asp-action="Create" method="post">
    <input type="hidden" asp-for="Type"/>

    <div class="form-group" asp-validation-class-for="Name">
        <label asp-for="Name">@T["Name"]</label>
        <input asp-for="Name" class="form-control" autofocus />
        <span asp-validation-for="Name"></span>
        <span class="hint">@T["The name of the secret."]</span>
    </div>

    <div class="form-group" asp-validation-class-for="Description">
        <label asp-for="Description">@T["Description"]</label>
        <input asp-for="Description" class="form-control" autofocus />
        <span class="hint">@T["The description of the secret."]</span>
    </div>

    <div class="form-group w-md-50" asp-validation-class-for="SelectedStore">
        <label asp-for="SelectedStore">@T["Store"]</label>
        <select class="form-control" asp-for="SelectedStore">
            @foreach(var storeEntry in Model.StoreEntries)
            {
                <option value="@storeEntry.Name" selected="@(Model.SelectedStore == storeEntry.Name)" data-isReadOnly="@storeEntry.IsReadOnly">@storeEntry.DisplayName</option>
            }
        </select>
        <span class="hint">@T["The store where the secret value is stored."]</span>
    </div>
    @* this will be a class / javascript to disable when a readonly store is selected 
    so either build the select ourselves 
    
    *@



    @if (Model.Editor != null)
    {
        @await DisplayAsync(Model.Editor)
    }

    <div class="form-group">
        <button class="btn btn-primary" type="submit">@T["Save"]</button>
        <a class="btn btn-secondary" asp-route-action="Index">@T["Cancel"]</a>
    </div>
</form>
