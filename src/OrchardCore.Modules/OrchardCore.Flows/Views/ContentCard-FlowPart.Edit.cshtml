@using OrchardCore.ContentManagement.Metadata.Settings;
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager

@{
    var contentItem = Model.Value.Widget;
    var contentTypeDisplayText = ContentDefinitionManager.GetTypeDefinition((string)contentItem.ContentType).DisplayName;
    var contentItemDisplayText = contentItem.DisplayText;
    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.GetSettings<ContentTypeSettings>().Stereotype == "Widget");

    var editorId = "contentEditor_" + Model.Value.PrefixValue;
}

<div class="widget widget-editor card my-1 @(Model.Value.Inline != true ? "collapsed" : "")">
    <div class="widget-editor-header card-header text-muted py-1 pl-3 pr-1">
        @if (Model.Value.CanMove != false)
        {
            <div class="widget-editor-handle"><i class="fas fa-arrows-alt"></i></div>
        }
        <button type="button" class="btn btn-outline-secondary btn-sm widget-editor-btn-toggle widget-editor-btn-collapse"><i class="fa fa-angle-down" aria-hidden="true"></i></button>
        <button type="button" class="btn btn-outline-secondary btn-sm widget-editor-btn-toggle widget-editor-btn-expand"><i class="fa fa-angle-right" aria-hidden="true"></i></button>
        <span data-content-type-display-text="@contentTypeDisplayText" class="widget-editor-header-text">@T["{0} {1}", contentItemDisplayText, contentTypeDisplayText]</span>
        <div class="btn-widget-metadata border border-info w-100">
            <div class="btn-group">
                @* @if (Model.Value.Footer != null)
                {
                    // TODO I broke this
                    @await DisplayAsync(Model.Value.Footer)
                } *@
                @if (Model.Value.CanInsert != false)
                {
                    <div class="btn-group">
                        <button class="toggleAll btn btn-secondary btn-sm" onclick="toggleWidgets(); return false;" title="@T["Toggle all widgets"]">
                            <i class="fa fa-angle-double-up" aria-hidden="true"></i></button>
                        <button type="button" title="@T["Insert Widget"]" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="fa fa-plus" aria-hidden="true"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-right">
                            @foreach (var type in widgetContentTypes.OrderBy(w => w.DisplayName))
                            {
                                <a class="dropdown-item insert-widget btn-sm"
                                   data-target-id="@Model.Value.TargetId"
                                   data-prefixes-name="@Model.Value.PrefixesName"
                                   data-flowmetadata="true"
                                   data-parent-content-type="@Model.Value.ParentContentType"
                                   data-part-name="@Model.Value.CollectionPartName"
                                   data-contenttypes-name="@Model.Value.ContentTypesName"
                                   data-widget-type="@type.Name"
                                   href="javascript:;">@type.DisplayName</a>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="btn-group btn-group-sm float-right" role="group">
            @if (Model.Value.CanDelete != false)
            {
                <button type="button" class="btn btn-danger widget-delete" data-title="@T["Delete"]" data-message="@T["Are you sure you want to remove this item?"]"><i class="fa fa-trash" aria-hidden="true"></i></button>
            }
        </div>
    </div>
    <div class="widget-editor-body card-body px-2 py-1">
        <div class="w-100">
            @if (Model.Value.ContentEditor != null)
            {
                @await DisplayAsync(Model.Value.ContentEditor)
                
            }
        </div>
    </div>
</div>
